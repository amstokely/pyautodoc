%feature("docstring")
AutoDoc
"\nDescription\n"
"--------------------\n"
"    The user interface class in PyAutoDoc that initiates the\n"
"    transfer of doxygen documentation from C++ to Python. A\n"
"    comprehensive PyAutoDoc tutorial can be found on the\n"
"    documentation main page."
"\n"
;%feature("docstring")
AutoDoc::AutoDoc
"\n"
"********************\n"
"*    Version 1     *\n"
"********************\n"

"AutoDoc(fname)\n"
"\nDescription\n"
"--------------------\n"
"    Use this constructor if you want to preserve C++ types\n"
"    in the python documentation."
"\n"
"\nParameters\n"
"--------------------\n"
"fname: str\n"
"    The C++ header file name that contains the C++\n"
"    doxygen documentation"
"\n"

"\n"
"********************\n"
"*    Version 2     *\n"
"********************\n"

"AutoDoc(fname, cppPyTypes)\n"
"\nDescription\n"
"--------------------\n"
"    Use this constructor if you want to replace C++ types\n"
"    with the Python types defined in the cppPyTypes parameter."
"\n"
"\nParameters\n"
"--------------------\n"
"fname: str\n"
"    The C++ header file name that contains the C++\n"
"    doxygen documentation"
"\n"
"\n"
"cppPyTypes: dict[str:str]\n"
"    Map defining the C++/Python type\n"
"    substitutions, where the keys are the C++ types, and the values\n"
"    are the Python types. The same substitutions with be performed\n"
"    for both parameters and functions. In python, cppPyTypes will be\n"
"    a string/string dictionary."
"\n"

"\n"
"********************\n"
"*    Version 3     *\n"
"********************\n"

"AutoDoc(fname, parameterCppPyTypes, functionCppPyTypes)\n"
"\nDescription\n"
"--------------------\n"
"    Use this constructor if you want to replace the C++\n"
"    types with Python types, but want to use different types for\n"
"    the parameters and functions. This is useful when a wrapped\n"
"    Python function can accept multiple \"similar\", but can only\n"
"    return one specific type."
"\n"
"\nParameters\n"
"--------------------\n"
"fname: str\n"
"    The C++ header file name that contains the C++\n"
"    doxygen documentation"
"\n"
"\n"
"parameterCppPyTypes: dict[str:str]\n"
"    Map defining the C++/Python type\n"
"    substitutions used for parameters, where the keys are the C++\n"
"    types, and the values\n"
"    are the Python types. In python, parameterCppPyTypes will be\n"
"    a string/string dictionary."
"\n"
"\n"
"functionCppPyTypes: dict[str:str]\n"
"    Map defining the C++/Python type\n"
"    substitutions used for functions, where the keys are the C++\n"
"    types, and the values\n"
"    are the Python types. In python, functionCppPyTypes will be\n"
"    a string/string dictionary."
"\n"
;%feature("docstring")
AutoDoc::writeSwigDocString
"writeSwigDocString(fname)->None\n"
"\nDescription\n"
"--------------------\n"
"    Writes a SWIG docstring feature directive interface file."
"\n"
"\nParameters\n"
"--------------------\n"
"fname: str\n"
"    The name of the output SWIG interface file. The\n"
"    interface file has a \".i\" extension and it's path must be in an\n"
"    include directive in the primary SWIG interface file."
"\n"
;